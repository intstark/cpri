/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xgpio.h"

#include "xiic.h"
#include "xiic_l.h"


/************************** Constant Definitions ******************************/

/*
 * The following constants map to the XPAR parameters created in the
 * xparameters.h file. They are defined here such that a user can easily
 * change all the needed parameters in one place.
 */
#define IIC_BASE_ADDRESS	XPAR_IIC_0_BASEADDR
#define IIC_DEVICE_ID		XPAR_XIICPS_0_DEVICE_ID
#define IIC_SLAVE_ADDR		0x74
#define IIC_I2CSPI_ADDR		0x2F
#define IIC_SI5382_ADDR		0x68

#define XRFDC_ADC_OR_DAC		0U
#define XRFdc_DEVICE_ID			XPAR_XRFDC_0_DEVICE_ID

#define GPIO_EXAMPLE_DEVICE_ID  XPAR_GPIO_0_DEVICE_ID


#define START_ADDRESS		0

#define IIC_RDBUF_SIZE		6
#define SEND_COUNT			2
#define RECEIVE_COUNT   	2



/*
 * The following constant is used to wait after an LED is turned on to make
 * sure that it is visible to the human eye.  This constant might need to be
 * tuned for faster or slower processor speeds.
 */
#define LED_DELAY     10000000

/*
 * The following constant is used to determine which channel of the GPIO is
 * used for the LED if there are 2 channels supported.
 */
#define LED_CHANNEL 1

/************************** Variable Definitions ******************************/

volatile u8 TransmitComplete;
volatile u8 ReceiveComplete;

u8 WriteBuffer[SEND_COUNT];	/* Write buffer for writing a page. */
u8 ReadBuffer[RECEIVE_COUNT];	/* Read buffer for reading a page. */


XIic IicInstance;		  /* The instance of the IIC device */


XGpio Gpio; 			/* The Instance of the GPIO Driver */



/************************** Function Declaration ******************************/

void GpioConfig(u16 DEVICE_ID);
void SI5382_CFG(u16 DEVICE_ID, u8 Address, u32 BASE_ADDRESS,u8 SLAVE_ADDR,u8 DEV_ADDR);



/************************** Function Definition ******************************/

void GpioConfig(u16 DEVICE_ID){

	int Status;
	volatile int Delay;
	u8 LED;

	/* Initialize the GPIO driver */
	Status = XGpio_Initialize(&Gpio, DEVICE_ID);
	if (Status != XST_SUCCESS) {
		xil_printf("Gpio Initialization Failed\r\n");
		return XST_FAILURE;
	}

	/* Set the direction for all signals as inputs except the LED output */
	XGpio_SetDataDirection(&Gpio, LED_CHANNEL, ~LED);

	/* Loop forever blinking the LED */

	u8 spark;

	for(spark=0;spark<8;spark=spark+1){

		LED=1<<spark;

		XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, LED);

		/* Wait a small amount of time so the LED is visible */
		for (Delay = 0; Delay < LED_DELAY; Delay++);

		/* Clear the LED bit */
		XGpio_DiscreteClear(&Gpio, LED_CHANNEL, LED);

		/* Wait a small amount of time so the LED is visible */
		for (Delay = 0; Delay < LED_DELAY; Delay++);

		printf("LED=%d\n\r",LED);
	}

	XGpio_DiscreteWrite(&Gpio, LED_CHANNEL, LED);

}



static void SendHandler(XIic *InstancePtr)
{
	TransmitComplete = 0;
}

static void ReceiveHandler(XIic *InstancePtr)
{
	ReceiveComplete = 0;
}

static void StatusHandler(XIic *InstancePtr, int Event)
{

}

/*****************************************************************************/
/**
* This function reads a data from the IIC Slave into a specified buffer.
*
* @param	BufferPtr contains the address of the data buffer to be filled.
* @param	ByteCount contains the number of bytes to be read.
*
* @return	XST_SUCCESS if successful else XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
static int WriteData(u16 ByteCount)
{
	int Status;
	int BusBusy;

	/*
	 * Set the defaults.
	 */
	TransmitComplete = 1;

	/*
	 * Start the IIC device.
	 */
	Status = XIic_Start(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the Repeated Start option.
	 */
	IicInstance.Options = XII_REPEATED_START_OPTION;

	/*
	 * Send the data.
	 */
	Status = XIic_MasterSend(&IicInstance, WriteBuffer, ByteCount);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait till data is transmitted.
	 */
	while (TransmitComplete) {

	}

	/*
	 * This is for verification that Bus is not released and still Busy.
	 */
	BusBusy = XIic_IsIicBusy(&IicInstance);

	TransmitComplete = 1;
	IicInstance.Options = 0x0;

	/*
	 * Send the Data.
	 */
	Status = XIic_MasterSend(&IicInstance, WriteBuffer, ByteCount);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait till data is transmitted.
	 */
	while ((TransmitComplete) || (XIic_IsIicBusy(&IicInstance) == TRUE)) {

	}

	/*
	 * Stop the IIC device.
	 */
	Status = XIic_Stop(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
* This function reads a data from the IIC Slave into a specified buffer.
*
* @param	BufferPtr contains the address of the data buffer to be filled.
* @param	ByteCount contains the number of bytes to be read.
*
* @return	XST_SUCCESS if successful else XST_FAILURE.
*
* @note		None.
*
******************************************************************************/
static int ReadData(u8 *BufferPtr, u16 ByteCount)
{
	int Status;
	int BusBusy;

	/*
	 * Set the defaults.
	 */
	ReceiveComplete = 1;

	/*
	 * Start the IIC device.
	 */
	Status = XIic_Start(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Set the Repeated Start option.
	 */
	IicInstance.Options = XII_REPEATED_START_OPTION;

	/*
	 * Receive the data.
	 */
	Status = XIic_MasterRecv(&IicInstance, BufferPtr, ByteCount);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait till all the data is received.
	 */
	while (ReceiveComplete) {

	}

	/*
	 * This is for verification that Bus is not released and still Busy.
	 */
	BusBusy = XIic_IsIicBusy(&IicInstance);

	ReceiveComplete = 1;
	IicInstance.Options = 0x0;

	/*
	 * Receive the Data.
	 */
	Status = XIic_MasterRecv(&IicInstance, BufferPtr, ByteCount);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait till all the data is received.
	 */
	while ((ReceiveComplete) || (XIic_IsIicBusy(&IicInstance) == TRUE)) {

	}

	/*
	 * Stop the IIC device.
	 */
	Status = XIic_Stop(&IicInstance);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	return XST_SUCCESS;
}


void SI5382_CFG(u16 DEVICE_ID, u8 Address, u32 BASE_ADDRESS,u8 SLAVE_ADDR,u8 DEV_ADDR){
	/*
	 * The following part is for I2C
	 */
	int Status;
	XIic_Config *Config;
	int Index;
	int i,j;

	/*
	 * Initialize the IIC driver so that it's ready to use
	 * Look up the configuration in the config table,
	 * then initialize it.
	 */
	Config = XIic_LookupConfig(DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XIic_CfgInitialize(&IicInstance, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}else{
		print("I2C initialize successfull\n\r");
	}

	/*
	 * Set the Transmit, Receive and Status handlers.
	 */
	XIic_SetSendHandler(&IicInstance, &IicInstance,
				(XIic_Handler) SendHandler);
	XIic_SetRecvHandler(&IicInstance, &IicInstance,
				(XIic_Handler) ReceiveHandler);
	XIic_SetStatusHandler(&IicInstance, &IicInstance,
				  (XIic_StatusHandler) StatusHandler);


	volatile unsigned SentByteCount;
	u8 WBUF[1]={0x10};
	printf("DATA=\t0x%x\n\r",WBUF[0]);
	SentByteCount=XIic_Send(BASE_ADDRESS,SLAVE_ADDR,WBUF,sizeof(WBUF),XIIC_STOP);
	printf("SentByteCount=\t0x%x\n\r",SentByteCount);

	u8 RD1[1];
	XIic_Recv(BASE_ADDRESS,SLAVE_ADDR,RD1,1,XIIC_STOP);
	printf("RD1=0x%x\n\r",RD1[0]);

	// SI5382
	u8 RD2[5];
	XIic_Recv(BASE_ADDRESS,DEV_ADDR,RD2,5, XIIC_STOP);

	printf("RD2=\t");
	for(i=0;i<sizeof(RD2);i++){
		printf("0x%x\t",RD2[i]);
	}
	printf("\n\r");



//	u8 REG[665][3] = {
//	    { 0x0B, 0x24, 0xC0 },
//	    { 0x0B, 0x25, 0x04 },
//	    { 0x05, 0x40, 0x01 },
//	    { 0x00, 0x06, 0x00 },
//	    { 0x00, 0x07, 0x00 },
//	    { 0x00, 0x08, 0x00 },
//	    { 0x00, 0x0B, 0x68 },
//	    { 0x00, 0x16, 0x03 },
//	    { 0x00, 0x17, 0xDC },
//	    { 0x00, 0x18, 0xEE },
//	    { 0x00, 0x19, 0xDD },
//	    { 0x00, 0x1A, 0xDF },
//	    { 0x00, 0x20, 0x02 },
//	    { 0x00, 0x23, 0xFF },
//	    { 0x00, 0x24, 0x0F },
//	    { 0x00, 0x25, 0x00 },
//	    { 0x00, 0x26, 0x00 },
//	    { 0x00, 0x27, 0x00 },
//	    { 0x00, 0x28, 0x00 },
//	    { 0x00, 0x2B, 0x02 },
//	    { 0x00, 0x2C, 0x01 },
//	    { 0x00, 0x2D, 0x00 },
//	    { 0x00, 0x2E, 0x3E },
//	    { 0x00, 0x2F, 0x00 },
//	    { 0x00, 0x30, 0x00 },
//	    { 0x00, 0x31, 0x00 },
//	    { 0x00, 0x32, 0x00 },
//	    { 0x00, 0x33, 0x00 },
//	    { 0x00, 0x34, 0x00 },
//	    { 0x00, 0x35, 0x00 },
//	    { 0x00, 0x36, 0x02 },
//	    { 0x00, 0x37, 0x00 },
//	    { 0x00, 0x38, 0x00 },
//	    { 0x00, 0x39, 0x00 },
//	    { 0x00, 0x3A, 0x00 },
//	    { 0x00, 0x3B, 0x00 },
//	    { 0x00, 0x3C, 0x00 },
//	    { 0x00, 0x3D, 0x00 },
//	    { 0x00, 0x3E, 0x10 },
//	    { 0x00, 0x3F, 0x11 },
//	    { 0x00, 0x40, 0x04 },
//	    { 0x00, 0x41, 0x0B },
//	    { 0x00, 0x42, 0x00 },
//	    { 0x00, 0x43, 0x00 },
//	    { 0x00, 0x44, 0x00 },
//	    { 0x00, 0x45, 0x0C },
//	    { 0x00, 0x46, 0x32 },
//	    { 0x00, 0x47, 0x00 },
//	    { 0x00, 0x48, 0x00 },
//	    { 0x00, 0x49, 0x00 },
//	    { 0x00, 0x4A, 0x32 },
//	    { 0x00, 0x4B, 0x00 },
//	    { 0x00, 0x4C, 0x00 },
//	    { 0x00, 0x4D, 0x00 },
//	    { 0x00, 0x4E, 0x05 },
//	    { 0x00, 0x4F, 0x00 },
//	    { 0x00, 0x50, 0x0F },
//	    { 0x00, 0x51, 0x03 },
//	    { 0x00, 0x52, 0x00 },
//	    { 0x00, 0x53, 0x00 },
//	    { 0x00, 0x54, 0x00 },
//	    { 0x00, 0x55, 0x03 },
//	    { 0x00, 0x56, 0x00 },
//	    { 0x00, 0x57, 0x00 },
//	    { 0x00, 0x58, 0x00 },
//	    { 0x00, 0x59, 0x01 },
//	    { 0x00, 0x5A, 0x67 },
//	    { 0x00, 0x5B, 0x45 },
//	    { 0x00, 0x5C, 0x23 },
//	    { 0x00, 0x5D, 0x01 },
//	    { 0x00, 0x5E, 0x00 },
//	    { 0x00, 0x5F, 0x00 },
//	    { 0x00, 0x60, 0x00 },
//	    { 0x00, 0x61, 0x00 },
//	    { 0x00, 0x62, 0x00 },
//	    { 0x00, 0x63, 0x00 },
//	    { 0x00, 0x64, 0x00 },
//	    { 0x00, 0x65, 0x00 },
//	    { 0x00, 0x66, 0x00 },
//	    { 0x00, 0x67, 0x00 },
//	    { 0x00, 0x68, 0x00 },
//	    { 0x00, 0x69, 0x00 },
//	    { 0x00, 0x92, 0x02 },
//	    { 0x00, 0x93, 0xA0 },
//	    { 0x00, 0x95, 0x00 },
//	    { 0x00, 0x96, 0x80 },
//	    { 0x00, 0x98, 0x60 },
//	    { 0x00, 0x9A, 0x02 },
//	    { 0x00, 0x9B, 0x60 },
//	    { 0x00, 0x9D, 0x08 },
//	    { 0x00, 0x9E, 0x40 },
//	    { 0x00, 0xA0, 0x20 },
//	    { 0x00, 0xA2, 0x00 },
//	    { 0x00, 0xA4, 0x00 },
//	    { 0x00, 0xA5, 0x00 },
//	    { 0x00, 0xA6, 0x00 },
//	    { 0x00, 0xA7, 0x00 },
//	    { 0x00, 0xA9, 0xB5 },
//	    { 0x00, 0xAA, 0x61 },
//	    { 0x00, 0xAB, 0x00 },
//	    { 0x00, 0xAC, 0x00 },
//	    { 0x00, 0xE5, 0x00 },
//	    { 0x00, 0xE6, 0x00 },
//	    { 0x00, 0xE7, 0x00 },
//	    { 0x00, 0xE8, 0x00 },
//	    { 0x00, 0xE9, 0x00 },
//	    { 0x00, 0xEA, 0x0A },
//	    { 0x00, 0xEB, 0x60 },
//	    { 0x00, 0xEC, 0x00 },
//	    { 0x00, 0xED, 0x00 },
//	    { 0x01, 0x02, 0x01 },
//	    { 0x01, 0x03, 0x06 },
//	    { 0x01, 0x04, 0x09 },
//	    { 0x01, 0x05, 0x3E },
//	    { 0x01, 0x06, 0x19 },
//	    { 0x01, 0x07, 0x02 },
//	    { 0x01, 0x08, 0x06 },
//	    { 0x01, 0x09, 0x09 },
//	    { 0x01, 0x0A, 0x3E },
//	    { 0x01, 0x0B, 0x19 },
//	    { 0x01, 0x0C, 0x02 },
//	    { 0x01, 0x0D, 0x01 },
//	    { 0x01, 0x0E, 0x09 },
//	    { 0x01, 0x0F, 0x3B },
//	    { 0x01, 0x10, 0x28 },
//	    { 0x01, 0x11, 0x02 },
//	    { 0x01, 0x12, 0x01 },
//	    { 0x01, 0x13, 0x09 },
//	    { 0x01, 0x14, 0x3B },
//	    { 0x01, 0x15, 0x28 },
//	    { 0x01, 0x16, 0x02 },
//	    { 0x01, 0x17, 0x01 },
//	    { 0x01, 0x18, 0x09 },
//	    { 0x01, 0x19, 0x3B },
//	    { 0x01, 0x1A, 0x28 },
//	    { 0x01, 0x1B, 0x02 },
//	    { 0x01, 0x1C, 0x01 },
//	    { 0x01, 0x1D, 0x09 },
//	    { 0x01, 0x1E, 0x3B },
//	    { 0x01, 0x1F, 0x28 },
//	    { 0x01, 0x20, 0x02 },
//	    { 0x01, 0x21, 0x01 },
//	    { 0x01, 0x22, 0x09 },
//	    { 0x01, 0x23, 0x3B },
//	    { 0x01, 0x24, 0x28 },
//	    { 0x01, 0x25, 0x02 },
//	    { 0x01, 0x26, 0x01 },
//	    { 0x01, 0x27, 0x09 },
//	    { 0x01, 0x28, 0x3B },
//	    { 0x01, 0x29, 0x28 },
//	    { 0x01, 0x2A, 0x02 },
//	    { 0x01, 0x2B, 0x01 },
//	    { 0x01, 0x2C, 0x09 },
//	    { 0x01, 0x2D, 0x3B },
//	    { 0x01, 0x2E, 0x28 },
//	    { 0x01, 0x2F, 0x02 },
//	    { 0x01, 0x30, 0x01 },
//	    { 0x01, 0x31, 0x09 },
//	    { 0x01, 0x32, 0x3B },
//	    { 0x01, 0x33, 0x28 },
//	    { 0x01, 0x34, 0x02 },
//	    { 0x01, 0x35, 0x01 },
//	    { 0x01, 0x36, 0x09 },
//	    { 0x01, 0x37, 0x3B },
//	    { 0x01, 0x38, 0x28 },
//	    { 0x01, 0x39, 0x02 },
//	    { 0x01, 0x3A, 0x01 },
//	    { 0x01, 0x3B, 0x09 },
//	    { 0x01, 0x3C, 0x3B },
//	    { 0x01, 0x3D, 0x28 },
//	    { 0x01, 0x3E, 0x02 },
//	    { 0x01, 0x3F, 0x00 },
//	    { 0x01, 0x40, 0x00 },
//	    { 0x01, 0x41, 0x40 },
//	    { 0x01, 0x42, 0xFF },
//	    { 0x02, 0x08, 0x10 },
//	    { 0x02, 0x09, 0x00 },
//	    { 0x02, 0x0A, 0x00 },
//	    { 0x02, 0x0B, 0x00 },
//	    { 0x02, 0x0C, 0x00 },
//	    { 0x02, 0x0D, 0x00 },
//	    { 0x02, 0x0E, 0x01 },
//	    { 0x02, 0x0F, 0x00 },
//	    { 0x02, 0x10, 0x00 },
//	    { 0x02, 0x11, 0x00 },
//	    { 0x02, 0x12, 0x00 },
//	    { 0x02, 0x13, 0x00 },
//	    { 0x02, 0x14, 0x00 },
//	    { 0x02, 0x15, 0x00 },
//	    { 0x02, 0x16, 0x00 },
//	    { 0x02, 0x17, 0x00 },
//	    { 0x02, 0x18, 0x00 },
//	    { 0x02, 0x19, 0x00 },
//	    { 0x02, 0x1A, 0x00 },
//	    { 0x02, 0x1B, 0x00 },
//	    { 0x02, 0x1C, 0x00 },
//	    { 0x02, 0x1D, 0x00 },
//	    { 0x02, 0x1E, 0x00 },
//	    { 0x02, 0x1F, 0x00 },
//	    { 0x02, 0x20, 0x00 },
//	    { 0x02, 0x21, 0x00 },
//	    { 0x02, 0x22, 0x00 },
//	    { 0x02, 0x23, 0x00 },
//	    { 0x02, 0x24, 0x00 },
//	    { 0x02, 0x25, 0x00 },
//	    { 0x02, 0x26, 0x00 },
//	    { 0x02, 0x27, 0x00 },
//	    { 0x02, 0x28, 0x00 },
//	    { 0x02, 0x29, 0x00 },
//	    { 0x02, 0x2A, 0x00 },
//	    { 0x02, 0x2B, 0x00 },
//	    { 0x02, 0x2C, 0x00 },
//	    { 0x02, 0x2D, 0x00 },
//	    { 0x02, 0x2E, 0x00 },
//	    { 0x02, 0x2F, 0x00 },
//	    { 0x02, 0x31, 0x0B },
//	    { 0x02, 0x32, 0x0B },
//	    { 0x02, 0x33, 0x0B },
//	    { 0x02, 0x34, 0x0B },
//	    { 0x02, 0x35, 0x00 },
//	    { 0x02, 0x36, 0x00 },
//	    { 0x02, 0x37, 0x00 },
//	    { 0x02, 0x38, 0x00 },
//	    { 0x02, 0x39, 0x00 },
//	    { 0x02, 0x3A, 0x01 },
//	    { 0x02, 0x3B, 0x00 },
//	    { 0x02, 0x3C, 0x00 },
//	    { 0x02, 0x3D, 0x00 },
//	    { 0x02, 0x3E, 0xF0 },
//	    { 0x02, 0x47, 0x00 },
//	    { 0x02, 0x48, 0x00 },
//	    { 0x02, 0x49, 0x00 },
//	    { 0x02, 0x4A, 0x00 },
//	    { 0x02, 0x4B, 0x00 },
//	    { 0x02, 0x4C, 0x00 },
//	    { 0x02, 0x4D, 0x00 },
//	    { 0x02, 0x4E, 0x00 },
//	    { 0x02, 0x4F, 0x00 },
//	    { 0x02, 0x50, 0x00 },
//	    { 0x02, 0x51, 0x00 },
//	    { 0x02, 0x52, 0x00 },
//	    { 0x02, 0x53, 0x00 },
//	    { 0x02, 0x54, 0x00 },
//	    { 0x02, 0x55, 0x00 },
//	    { 0x02, 0x56, 0x00 },
//	    { 0x02, 0x57, 0x00 },
//	    { 0x02, 0x58, 0x00 },
//	    { 0x02, 0x59, 0x00 },
//	    { 0x02, 0x5A, 0x00 },
//	    { 0x02, 0x5B, 0x00 },
//	    { 0x02, 0x5C, 0x00 },
//	    { 0x02, 0x5D, 0x00 },
//	    { 0x02, 0x5E, 0x00 },
//	    { 0x02, 0x5F, 0x00 },
//	    { 0x02, 0x60, 0x00 },
//	    { 0x02, 0x61, 0x00 },
//	    { 0x02, 0x62, 0x00 },
//	    { 0x02, 0x63, 0x00 },
//	    { 0x02, 0x64, 0x00 },
//	    { 0x02, 0x65, 0x00 },
//	    { 0x02, 0x66, 0x00 },
//	    { 0x02, 0x67, 0x00 },
//	    { 0x02, 0x68, 0x00 },
//	    { 0x02, 0x69, 0x00 },
//	    { 0x02, 0x6A, 0x00 },
//	    { 0x02, 0x6B, 0x43 },
//	    { 0x02, 0x6C, 0x50 },
//	    { 0x02, 0x6D, 0x52 },
//	    { 0x02, 0x6E, 0x49 },
//	    { 0x02, 0x6F, 0x00 },
//	    { 0x02, 0x70, 0x00 },
//	    { 0x02, 0x71, 0x00 },
//	    { 0x02, 0x72, 0x00 },
//	    { 0x02, 0x8A, 0x00 },
//	    { 0x02, 0x8B, 0x00 },
//	    { 0x02, 0x8C, 0x00 },
//	    { 0x02, 0x8D, 0x00 },
//	    { 0x02, 0x8E, 0x00 },
//	    { 0x02, 0x8F, 0x00 },
//	    { 0x02, 0x90, 0x00 },
//	    { 0x02, 0x91, 0x00 },
//	    { 0x02, 0x92, 0x3F },
//	    { 0x02, 0x93, 0xFF },
//	    { 0x02, 0x94, 0xB8 },
//	    { 0x02, 0x96, 0x02 },
//	    { 0x02, 0x97, 0x02 },
//	    { 0x02, 0x99, 0x02 },
//	    { 0x02, 0x9A, 0x00 },
//	    { 0x02, 0x9B, 0x00 },
//	    { 0x02, 0x9C, 0x00 },
//	    { 0x02, 0x9D, 0xFA },
//	    { 0x02, 0x9E, 0x01 },
//	    { 0x02, 0x9F, 0x00 },
//	    { 0x02, 0xA6, 0x00 },
//	    { 0x02, 0xA7, 0x00 },
//	    { 0x02, 0xA8, 0x00 },
//	    { 0x02, 0xA9, 0xCC },
//	    { 0x02, 0xAA, 0x04 },
//	    { 0x02, 0xAB, 0x00 },
//	    { 0x02, 0xB7, 0xFF },
//	    { 0x02, 0xBC, 0x00 },
//	    { 0x03, 0x02, 0x00 },
//	    { 0x03, 0x03, 0x00 },
//	    { 0x03, 0x04, 0x00 },
//	    { 0x03, 0x05, 0x00 },
//	    { 0x03, 0x06, 0x00 },
//	    { 0x03, 0x07, 0x00 },
//	    { 0x03, 0x08, 0x00 },
//	    { 0x03, 0x09, 0x00 },
//	    { 0x03, 0x0A, 0x00 },
//	    { 0x03, 0x0B, 0x00 },
//	    { 0x03, 0x0C, 0x00 },
//	    { 0x03, 0x0D, 0x00 },
//	    { 0x03, 0x0E, 0x00 },
//	    { 0x03, 0x0F, 0x00 },
//	    { 0x03, 0x10, 0x00 },
//	    { 0x03, 0x11, 0x0F },
//	    { 0x03, 0x12, 0x00 },
//	    { 0x03, 0x13, 0x00 },
//	    { 0x03, 0x14, 0x00 },
//	    { 0x03, 0x15, 0x00 },
//	    { 0x03, 0x16, 0x80 },
//	    { 0x03, 0x17, 0x00 },
//	    { 0x03, 0x18, 0x00 },
//	    { 0x03, 0x19, 0x00 },
//	    { 0x03, 0x1A, 0x00 },
//	    { 0x03, 0x1B, 0x00 },
//	    { 0x03, 0x1C, 0x00 },
//	    { 0x03, 0x1D, 0x00 },
//	    { 0x03, 0x1E, 0x00 },
//	    { 0x03, 0x1F, 0x00 },
//	    { 0x03, 0x20, 0x00 },
//	    { 0x03, 0x21, 0x00 },
//	    { 0x03, 0x22, 0x00 },
//	    { 0x03, 0x23, 0x00 },
//	    { 0x03, 0x24, 0x00 },
//	    { 0x03, 0x25, 0x00 },
//	    { 0x03, 0x26, 0x00 },
//	    { 0x03, 0x27, 0x00 },
//	    { 0x03, 0x28, 0x00 },
//	    { 0x03, 0x29, 0x00 },
//	    { 0x03, 0x2A, 0x00 },
//	    { 0x03, 0x2B, 0x00 },
//	    { 0x03, 0x2C, 0x00 },
//	    { 0x03, 0x2D, 0x00 },
//	    { 0x03, 0x2E, 0x00 },
//	    { 0x03, 0x2F, 0x00 },
//	    { 0x03, 0x30, 0x00 },
//	    { 0x03, 0x31, 0x00 },
//	    { 0x03, 0x32, 0x00 },
//	    { 0x03, 0x33, 0x00 },
//	    { 0x03, 0x34, 0x00 },
//	    { 0x03, 0x35, 0x00 },
//	    { 0x03, 0x36, 0x00 },
//	    { 0x03, 0x37, 0x00 },
//	    { 0x03, 0x38, 0x00 },
//	    { 0x03, 0x3B, 0x00 },
//	    { 0x03, 0x3C, 0x00 },
//	    { 0x03, 0x3D, 0x00 },
//	    { 0x03, 0x3E, 0x00 },
//	    { 0x03, 0x3F, 0x00 },
//	    { 0x03, 0x40, 0x00 },
//	    { 0x03, 0x5B, 0x00 },
//	    { 0x03, 0x5C, 0x00 },
//	    { 0x03, 0x5D, 0x00 },
//	    { 0x03, 0x5E, 0x00 },
//	    { 0x03, 0x5F, 0x00 },
//	    { 0x03, 0x60, 0x00 },
//	    { 0x03, 0x61, 0x00 },
//	    { 0x03, 0x62, 0x00 },
//	    { 0x04, 0x08, 0x00 },
//	    { 0x04, 0x09, 0x00 },
//	    { 0x04, 0x0A, 0x00 },
//	    { 0x04, 0x0B, 0x00 },
//	    { 0x04, 0x0C, 0x00 },
//	    { 0x04, 0x0D, 0x00 },
//	    { 0x04, 0x0E, 0x00 },
//	    { 0x04, 0x0F, 0x00 },
//	    { 0x04, 0x10, 0x00 },
//	    { 0x04, 0x11, 0x00 },
//	    { 0x04, 0x12, 0x00 },
//	    { 0x04, 0x13, 0x00 },
//	    { 0x04, 0x15, 0x00 },
//	    { 0x04, 0x16, 0x00 },
//	    { 0x04, 0x17, 0x00 },
//	    { 0x04, 0x18, 0x00 },
//	    { 0x04, 0x19, 0x00 },
//	    { 0x04, 0x1A, 0x00 },
//	    { 0x04, 0x1B, 0x00 },
//	    { 0x04, 0x1C, 0x00 },
//	    { 0x04, 0x1D, 0x00 },
//	    { 0x04, 0x1E, 0x00 },
//	    { 0x04, 0x1F, 0x00 },
//	    { 0x04, 0x21, 0x2B },
//	    { 0x04, 0x22, 0x01 },
//	    { 0x04, 0x23, 0x00 },
//	    { 0x04, 0x24, 0x00 },
//	    { 0x04, 0x25, 0x00 },
//	    { 0x04, 0x26, 0x00 },
//	    { 0x04, 0x27, 0x00 },
//	    { 0x04, 0x28, 0x00 },
//	    { 0x04, 0x29, 0x00 },
//	    { 0x04, 0x2A, 0x00 },
//	    { 0x04, 0x2B, 0x01 },
//	    { 0x04, 0x2C, 0x0F },
//	    { 0x04, 0x2D, 0x03 },
//	    { 0x04, 0x2E, 0x00 },
//	    { 0x04, 0x2F, 0x00 },
//	    { 0x04, 0x31, 0x00 },
//	    { 0x04, 0x32, 0x00 },
//	    { 0x04, 0x33, 0x04 },
//	    { 0x04, 0x34, 0x00 },
//	    { 0x04, 0x36, 0x06 },
//	    { 0x04, 0x37, 0x00 },
//	    { 0x04, 0x38, 0x00 },
//	    { 0x04, 0x39, 0x00 },
//	    { 0x04, 0x3D, 0x0A },
//	    { 0x04, 0x3E, 0x06 },
//	    { 0x04, 0x87, 0x00 },
//	    { 0x04, 0x88, 0x00 },
//	    { 0x04, 0x89, 0x00 },
//	    { 0x04, 0x8A, 0x00 },
//	    { 0x04, 0x8B, 0x00 },
//	    { 0x04, 0x8C, 0x00 },
//	    { 0x04, 0x8D, 0x00 },
//	    { 0x04, 0x9B, 0x18 },
//	    { 0x04, 0x9C, 0x4C },
//	    { 0x04, 0x9D, 0x00 },
//	    { 0x04, 0x9E, 0x00 },
//	    { 0x04, 0x9F, 0x00 },
//	    { 0x04, 0xA0, 0x00 },
//	    { 0x04, 0xA1, 0x00 },
//	    { 0x04, 0xA2, 0x00 },
//	    { 0x04, 0xA4, 0x20 },
//	    { 0x04, 0xA5, 0x00 },
//	    { 0x04, 0xA6, 0x00 },
//	    { 0x04, 0xAC, 0x00 },
//	    { 0x04, 0xAD, 0x00 },
//	    { 0x04, 0xAE, 0x00 },
//	    { 0x04, 0xB1, 0x00 },
//	    { 0x04, 0xB2, 0x00 },
//	    { 0x05, 0x08, 0x0E },
//	    { 0x05, 0x09, 0x1D },
//	    { 0x05, 0x0A, 0x0C },
//	    { 0x05, 0x0B, 0x0B },
//	    { 0x05, 0x0C, 0x3F },
//	    { 0x05, 0x0D, 0x0F },
//	    { 0x05, 0x0E, 0x11 },
//	    { 0x05, 0x0F, 0x25 },
//	    { 0x05, 0x10, 0x09 },
//	    { 0x05, 0x11, 0x08 },
//	    { 0x05, 0x12, 0x3F },
//	    { 0x05, 0x13, 0x0F },
//	    { 0x05, 0x15, 0x00 },
//	    { 0x05, 0x16, 0x00 },
//	    { 0x05, 0x17, 0x00 },
//	    { 0x05, 0x18, 0x00 },
//	    { 0x05, 0x19, 0x00 },
//	    { 0x05, 0x1A, 0x03 },
//	    { 0x05, 0x1B, 0x00 },
//	    { 0x05, 0x1C, 0x00 },
//	    { 0x05, 0x1D, 0x00 },
//	    { 0x05, 0x1E, 0x00 },
//	    { 0x05, 0x1F, 0x80 },
//	    { 0x05, 0x21, 0x0B },
//	    { 0x05, 0x2A, 0x01 },
//	    { 0x05, 0x2B, 0x01 },
//	    { 0x05, 0x2C, 0x87 },
//	    { 0x05, 0x2D, 0x03 },
//	    { 0x05, 0x2E, 0x19 },
//	    { 0x05, 0x2F, 0x19 },
//	    { 0x05, 0x31, 0x00 },
//	    { 0x05, 0x32, 0x65 },
//	    { 0x05, 0x33, 0x03 },
//	    { 0x05, 0x34, 0x00 },
//	    { 0x05, 0x36, 0x00 },
//	    { 0x05, 0x37, 0x00 },
//	    { 0x05, 0x38, 0x00 },
//	    { 0x05, 0x39, 0x00 },
//	    { 0x05, 0x3A, 0x01 },
//	    { 0x05, 0x3B, 0x03 },
//	    { 0x05, 0x3C, 0x00 },
//	    { 0x05, 0x3D, 0x04 },
//	    { 0x05, 0x3E, 0x02 },
//	    { 0x05, 0x88, 0x07 },
//	    { 0x05, 0x89, 0x0D },
//	    { 0x05, 0x8A, 0x00 },
//	    { 0x05, 0x8B, 0x49 },
//	    { 0x05, 0x8C, 0x57 },
//	    { 0x05, 0x8D, 0x00 },
//	    { 0x05, 0x9B, 0x78 },
//	    { 0x05, 0x9C, 0x8C },
//	    { 0x05, 0x9D, 0x0E },
//	    { 0x05, 0x9E, 0x1F },
//	    { 0x05, 0x9F, 0x0C },
//	    { 0x05, 0xA0, 0x0B },
//	    { 0x05, 0xA1, 0x3F },
//	    { 0x05, 0xA2, 0x0F },
//	    { 0x05, 0xA4, 0x08 },
//	    { 0x05, 0xA5, 0x00 },
//	    { 0x05, 0xA6, 0x03 },
//	    { 0x05, 0xAC, 0x09 },
//	    { 0x05, 0xAD, 0xE7 },
//	    { 0x05, 0xAE, 0x45 },
//	    { 0x05, 0xB1, 0xDD },
//	    { 0x05, 0xB2, 0x02 },
//	    { 0x08, 0x02, 0x53 },
//	    { 0x08, 0x03, 0x0B },
//	    { 0x08, 0x04, 0x10 },
//	    { 0x08, 0x05, 0x00 },
//	    { 0x08, 0x06, 0x00 },
//	    { 0x08, 0x07, 0x00 },
//	    { 0x08, 0x08, 0x00 },
//	    { 0x08, 0x09, 0x00 },
//	    { 0x08, 0x0A, 0x00 },
//	    { 0x08, 0x0B, 0x00 },
//	    { 0x08, 0x0C, 0x00 },
//	    { 0x08, 0x0D, 0x00 },
//	    { 0x08, 0x0E, 0x00 },
//	    { 0x08, 0x0F, 0x00 },
//	    { 0x08, 0x10, 0x00 },
//	    { 0x08, 0x11, 0x00 },
//	    { 0x08, 0x12, 0x00 },
//	    { 0x08, 0x13, 0x00 },
//	    { 0x08, 0x14, 0x00 },
//	    { 0x08, 0x15, 0x00 },
//	    { 0x08, 0x16, 0x00 },
//	    { 0x08, 0x17, 0x00 },
//	    { 0x08, 0x18, 0x00 },
//	    { 0x08, 0x19, 0x00 },
//	    { 0x08, 0x1A, 0x00 },
//	    { 0x08, 0x1B, 0x00 },
//	    { 0x08, 0x1C, 0x00 },
//	    { 0x08, 0x1D, 0x00 },
//	    { 0x08, 0x1E, 0x00 },
//	    { 0x08, 0x1F, 0x00 },
//	    { 0x08, 0x20, 0x00 },
//	    { 0x08, 0x21, 0x00 },
//	    { 0x08, 0x22, 0x00 },
//	    { 0x08, 0x23, 0x00 },
//	    { 0x08, 0x24, 0x00 },
//	    { 0x08, 0x25, 0x00 },
//	    { 0x08, 0x26, 0x00 },
//	    { 0x08, 0x27, 0x00 },
//	    { 0x08, 0x28, 0x00 },
//	    { 0x08, 0x29, 0x00 },
//	    { 0x08, 0x2A, 0x00 },
//	    { 0x08, 0x2B, 0x00 },
//	    { 0x08, 0x2C, 0x00 },
//	    { 0x08, 0x2D, 0x00 },
//	    { 0x08, 0x2E, 0x00 },
//	    { 0x08, 0x2F, 0x00 },
//	    { 0x08, 0x30, 0x00 },
//	    { 0x08, 0x31, 0x00 },
//	    { 0x08, 0x32, 0x00 },
//	    { 0x08, 0x33, 0x00 },
//	    { 0x08, 0x34, 0x00 },
//	    { 0x08, 0x35, 0x00 },
//	    { 0x08, 0x36, 0x00 },
//	    { 0x08, 0x37, 0x00 },
//	    { 0x08, 0x38, 0x00 },
//	    { 0x08, 0x39, 0x00 },
//	    { 0x08, 0x3A, 0x00 },
//	    { 0x08, 0x3B, 0x00 },
//	    { 0x08, 0x3C, 0x00 },
//	    { 0x08, 0x3D, 0x00 },
//	    { 0x08, 0x3E, 0x00 },
//	    { 0x08, 0x3F, 0x00 },
//	    { 0x08, 0x40, 0x00 },
//	    { 0x08, 0x41, 0x00 },
//	    { 0x08, 0x42, 0x00 },
//	    { 0x08, 0x43, 0x00 },
//	    { 0x08, 0x44, 0x00 },
//	    { 0x08, 0x45, 0x00 },
//	    { 0x08, 0x46, 0x00 },
//	    { 0x08, 0x47, 0x00 },
//	    { 0x08, 0x48, 0x00 },
//	    { 0x08, 0x49, 0x00 },
//	    { 0x08, 0x4A, 0x00 },
//	    { 0x08, 0x4B, 0x00 },
//	    { 0x08, 0x4C, 0x00 },
//	    { 0x08, 0x4D, 0x00 },
//	    { 0x08, 0x4E, 0x00 },
//	    { 0x08, 0x4F, 0x00 },
//	    { 0x08, 0x50, 0x00 },
//	    { 0x08, 0x51, 0x00 },
//	    { 0x08, 0x52, 0x00 },
//	    { 0x08, 0x53, 0x00 },
//	    { 0x08, 0x54, 0x00 },
//	    { 0x08, 0x55, 0x00 },
//	    { 0x08, 0x56, 0x00 },
//	    { 0x08, 0x57, 0x00 },
//	    { 0x08, 0x58, 0x00 },
//	    { 0x08, 0x59, 0x00 },
//	    { 0x08, 0x5A, 0x00 },
//	    { 0x08, 0x5B, 0x00 },
//	    { 0x08, 0x5C, 0x00 },
//	    { 0x08, 0x5D, 0x00 },
//	    { 0x08, 0x5E, 0x00 },
//	    { 0x08, 0x5F, 0x00 },
//	    { 0x08, 0x60, 0x00 },
//	    { 0x08, 0x61, 0x00 },
//	    { 0x09, 0x0E, 0x03 },
//	    { 0x09, 0x43, 0x00 },
//	    { 0x09, 0x49, 0x01 },
//	    { 0x09, 0x4A, 0x01 },
//	    { 0x09, 0x4E, 0x49 },
//	    { 0x09, 0x4F, 0xF2 },
//	    { 0x09, 0x5E, 0x00 },
//	    { 0x0A, 0x02, 0x00 },
//	    { 0x0A, 0x03, 0x02 },
//	    { 0x0A, 0x04, 0x02 },
//	    { 0x0A, 0x05, 0x02 },
//	    { 0x0A, 0x1A, 0x00 },
//	    { 0x0A, 0x20, 0x00 },
//	    { 0x0A, 0x26, 0x00 },
//	    { 0x0A, 0x2C, 0x00 },
//	    { 0x0A, 0x3C, 0x00 },
//	    { 0x0A, 0x3D, 0x00 },
//	    { 0x0A, 0x3E, 0x00 },
//	    { 0x0A, 0x40, 0x00 },
//	    { 0x0A, 0x41, 0x00 },
//	    { 0x0A, 0x42, 0x00 },
//	    { 0x0A, 0x44, 0x00 },
//	    { 0x0A, 0x45, 0x00 },
//	    { 0x0A, 0x46, 0x00 },
//	    { 0x0A, 0x48, 0x00 },
//	    { 0x0A, 0x49, 0x00 },
//	    { 0x0A, 0x4A, 0x00 },
//	    { 0x0A, 0x50, 0x00 },
//	    { 0x0A, 0x51, 0x00 },
//	    { 0x0A, 0x52, 0x00 },
//	    { 0x0A, 0x53, 0x00 },
//	    { 0x0A, 0x54, 0x00 },
//	    { 0x0A, 0x55, 0x00 },
//	    { 0x0A, 0x56, 0x00 },
//	    { 0x0A, 0x57, 0x00 },
//	    { 0x0A, 0x58, 0x00 },
//	    { 0x0A, 0x59, 0x00 },
//	    { 0x0A, 0x5A, 0x00 },
//	    { 0x0A, 0x5B, 0x00 },
//	    { 0x0A, 0x5C, 0x00 },
//	    { 0x0A, 0x5D, 0x00 },
//	    { 0x0A, 0x5E, 0x00 },
//	    { 0x0A, 0x5F, 0x00 },
//	    { 0x0B, 0x44, 0x2F },
//	    { 0x0B, 0x45, 0x01 },
//	    { 0x0B, 0x46, 0x00 },
//	    { 0x0B, 0x47, 0x0E },
//	    { 0x0B, 0x48, 0x0E },
//	    { 0x0B, 0x4A, 0x1D },
//	    { 0x0B, 0x53, 0x10 },
//	    { 0x0B, 0x57, 0xF0 },
//	    { 0x0B, 0x58, 0x00 },
//	    { 0x0C, 0x02, 0x03 },
//	    { 0x0C, 0x03, 0x01 },
//	    { 0x0C, 0x05, 0x00 },
//	    { 0x0C, 0x06, 0x00 },
//	    { 0x0C, 0x07, 0x01 },
//	    { 0x0C, 0x08, 0x01 },
//	    /* End configuration registers */
//
//	    /* Start configuration postamble */
//	    { 0x05, 0x14, 0x01 },
//	    { 0x00, 0x1C, 0x01 },
//	    { 0x05, 0x40, 0x00 },
//	    { 0x0B, 0x24, 0xC3 },
//	    { 0x0B, 0x25, 0x06 }
//	/* End configuration postamble */
//	};
//
//    for(i=0;i<665;i++){
//    	printf("REG=\t");
//    	for(j=0;j<sizeof(REG[i]);j++){
//    		printf("0x%x\t",REG[i][j]);
//    	}
//    	printf("\n\r");
//    	if(i==3){
//    		sleep(1);
//    	}
//        SentByteCount=XIic_Send(BASE_ADDRESS,DEV_ADDR,REG[i],sizeof(REG[i]),XIIC_STOP);
//    }
//
//    printf("SC18IS Config Done\n\r");

	// SI5382
	u8 REG[3]={0x0b,0x25,0x06};
	u8 RD3[3]={0x00,0x00,0x00};
	XIic_Send(BASE_ADDRESS,DEV_ADDR,REG,sizeof(REG),XIIC_STOP);

	XIic_Send(BASE_ADDRESS,SLAVE_ADDR,WBUF,sizeof(WBUF),XIIC_STOP);
	XIic_Recv(BASE_ADDRESS,DEV_ADDR,RD3,3, XIIC_STOP);

	printf("RD3=\t");
	for(i=0;i<sizeof(RD3);i++){
		printf("0x%x\t",RD3[i]);
	}
	printf("\n\r");

}



int main()
{
    init_platform();

    print("***************** Hello R5 *****************\n\r");

	print("Here goes the GPIO testing\n\r");

	GpioConfig(GPIO_EXAMPLE_DEVICE_ID);

	SI5382_CFG(IIC_DEVICE_ID, START_ADDRESS, IIC_BASE_ADDRESS,IIC_SLAVE_ADDR,IIC_SI5382_ADDR);

	sleep(1);


    cleanup_platform();

    return 0;
}
